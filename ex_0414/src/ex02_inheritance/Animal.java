package ex02_inheritance;

//상속
//부모클래스의 필드와 메서드를 자식클래스가 사용할 수 있는것
//자식클래스가 부모클래스의 필드와 메서드를사용하는 시점은 
//자식클래스의 객체가 만들어질 때

//부모클래스 : 기반클래스, 슈퍼클래스
//자식클래스 : 파생클래스, 서브클래스

//부모클래스는 여러개의 자식클래스를 가질 수 있다.
//하나의 자식클래스는 여러개의 부모클래스를 가질 수 없다.

//다이아몬드 문제
//클래스 A를 상속하는 클래스 B,C가 각각 동일한 필드나 메서드를 
//클래스 B,C를 상속하는 클래스 D에서 어느 부모의 클래스의 
//메서드를호출해야 하는지 모호해지는 문제가 발생한다.

//N차 상속이 가능하다

//부모클래스는 공통, 일반적인(general) 개념을 담고 있다.
//자식클래스는 자식클래스만의 구체적인 특징을 갖고 있다.

public abstract class Animal {
	int eyes = 2;
	int legs = 4;
	boolean tail = true;
	String fur = "털이 있음";
	
	public void animal_info() {
		//super -> 부모클래스를 지칭하는 키워드
		//this -> 객체 자기 자신을 참조하는 키워드
		System.out.println("눈 : " + eyes);
		System.out.println("다리 : " + legs);
		if(tail) {
			System.out.println("꼬리 : 있음");
		}
		System.out.println("털 : " + fur);
	}
	
	//메서드에 final을 붙히면 오버라이딩이 불가능하다.
	public abstract void cry();
}

//객체지향 프로그래밍의 설계원칙
//1. SRP(Single Resonpeonsibility Principle)
//단일 책임의 원칙
//클래스는 하나의 책임을 가져야 한다.
//한 클래스가 데이터 저장 및 로직 처리 등 여러 역할을 동시에
//담당하면 변경 시 문제가 발생할 확률이 높다.
//하나의 역할만 수행하도록 분리하세요
//2. OCP(OPEN-CLOSED Principle)
//개방-폐쇄의 원칙
//소프트웨어 구성 요소는 확장에는 열려있어야 하지만
//수정에는 닫혀있어야 한다.
//새로운 기능이 추가되어도 기존 코드를 변경하지 않고
//새로운 클래스를 추가하거나 상속 및 인터페이스로 확장하세요
//3. LSV(Liskov Substitution Principle)
//리스코프 치환의 원칙
//자식타입은 언제나 부모타입으로 대체할 수 있다.
//부모 클래스 타입의 변수에 자식 클래스의 객체를 사용해도
//프로그램이 올바르게 동작해야 하며, 자식 클래스가 부모클래스의
//가이드를 위배하지 않아야 합니다.
//4. ISP(Interface Segregation Principle)
//인터페이스 분리 원칙
//하나의 일반적인 인터페이스보다 여러 개의 구체적인 인터페이스를 사용해야한다.
//인터페이스를 작고 구체적인 역할로 분리하여 구현한다.
//5. DIP(Dependency Inversion Principle)
//의존 역전 원칙
//고수준 모듈은 저수준 모듈에 의존하면 안되며, 둘 다 추상화에 의존해야 한다.
//구체적인 구현보다는 추상화(추클or인터페이스)를 이용해
//모듈 간 결합도를 낮추면, 한 모듈이 다른 모듈에 미치는 영향을
//줄일 수 있다.

//객체 지향 프로그래밍의 4대 원칙
//1. 추상화
//인터페이스와 추상클래스 등을 통해 시스템의 공통된 행동을 정의
//변경에 따른 영향을 최소화하고 유지보수에 용이하다.

//2. 상속
//공통된 로직은 상위 클래스에 정의하고, 하위 클래스에서는
//재사용 하면서 특화된 기능을 추가해 중복을 줄여라

//3. 캡슐화
//객체 내부의 데이터를 보호하고, 외부에서는 메서드로만 접근하도록 하는것

//4. 다형성
//동일한 인터페이스나 상위 클래스를 이용하여 다른 객체를
//사용할 수 있게 하는 능력
//코드 유연성과 확장성을 높여, 실행 시점에 객체의 실제 타입에 따라
//적절한 로직이 실행되도록 합니다.













































